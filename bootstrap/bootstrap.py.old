#!/usr/bin/env python

ruby_tarball = 'ruby-enterprise-1.8.7-2011.03.tar.gz'
arch         = 'x86_64'
ruby_rpm     = 'ruby-enterprise-1.8.7-7.el5.%s.rpm' % arch
rubygems_rpm = 'ruby-enterprise-rubygems-1.5.2-7.el5.%s.rpm' % arch

server = True

##############################################################################

import re
import os
import sys
import shutil
import platform
import subprocess

from os.path import *

# This script is designed to be _idempotent_, meaning it can be run multiple
# times and only new changes will be added to the system.

def mkreader(*args, **kwargs):
    print args
    kwargs['stdout'] = subprocess.PIPE
    p = subprocess.Popen(args, **kwargs)
    return p.stdout

def mkwriter(*args, **kwargs):
    print args
    kwargs['stdin'] = subprocess.PIPE
    p = subprocess.Popen(args, **kwargs)
    return p.stdin

def shuttle(reader, writer):
    data = reader.read(8192)
    while data:
        writer.write(data)
        data = reader.read(8192)

def shell(*args, **kwargs):
    print args
    if subprocess.call(args, **kwargs) == 0:
        return True
    else:
        raise Exception("Command failed: " + str(args))

def install(*pkgs):
    shell('yum', 'install', '-y', *pkgs)

def install64(*pkgs):
    shell('yum', 'install', '-y', *map(lambda x: x + '.x86_64', pkgs))

if sys.platform == 'linux2':
    packages = []
    for line in mkreader('yum', 'list', 'installed'):
        match = re.match('^(.+?)\s+', line)
        if match:
            package = match.group(1)
            if re.search('\.', package):
                packages.append(package)

def has_package(pkg):
    for package in packages:
        if re.search(re.escape(pkg), package):
            return package
    return None

def remove(*pkgs):
    to_remove = []
    for pkg in pkgs:
        if sys.platform == 'linux2':
            global packages
            for package in packages:
                if re.search(re.escape(pkg), package):
                    to_remove.append(pkg)
                    break
    if len(to_remove) > 0:
        shell('yum', 'remove', '-q', '-y', *to_remove)

def modify(path, regexp, subst=None):
    modified  = False
    temp_path = join('/tmp', basename(path))

    fd = open(path, 'r')
    out = open(temp_path, 'w')
    for line in fd:
        if subst:
            new_line = re.sub(regexp, subst, line)
            if line != new_line:
                modified = True
                line = new_line
        elif re.search(regexp, line):
            modified = True
            continue
        out.write(line)
    out.close()
    fd.close()

    fd = open(temp_path, 'r')
    out = open(path, 'w')
    for line in fd:
        out.write(line)
    out.close()
    fd.close()

    os.remove(temp_path)

    return modified

def append_file(path, line_to_add):
    temp_path = join('/tmp', basename(path))

    fd = open(path, 'r')
    out = open(temp_path, 'w')
    for line in fd:
        out.write(line)
    out.write(line_to_add)
    out.write('\n')
    out.close()
    fd.close()

    fd = open(temp_path, 'r')
    out = open(path, 'w')
    for line in fd:
        out.write(line)
    out.close()
    fd.close()

    os.remove(temp_path)

# Setup SSH

if not isdir('/root/.ssh'):
    os.mkdir('/root/.ssh', 0700)

if not isdir('/root/.ssh/authorized_keys'):
    authorized_keys = open('/root/.ssh/authorized_keys', 'w')
    authorized_keys.write('''ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAuieodZ1orcaND9D7eOurADUH353+3ngTgKRt+SZ9clstR4l4lWr4BCZrrEITS3lka6AgqNDepNfGIuGrFoQkV/3R2aathNNZJt/vsSCFSD2RbUNDiAl4JODqkVXpdUsDS+0DLtsvHfTlpgfTabU3rs/WJuG3YnpSFFRclYoE7aLeuKgI+0HtrtIQVyzO+E6+t3eAVKlgRi6c0f0MKeElHsgh5s1InxPUMr8JiT9C+3Uio2DlTUT0wZc0Amix0JbpgfsxJ8uSqn/0z93ty133ZJX6KzvB95aF6AFnseptzM5/Fl5CKclbsOta99NBEGVjZwpzUZNhXRfaEtAWQI/Htw==
mobile@John-Wiegleys-iPhone
ssh-dss AAAAB3NzaC1kc3MAAACBAIW3kMaGkdT02c09kslw+/HPOVPpuquwySb2vXgrdvtJsrUtJiEsyP+Us5s0T3ZzlDfqKHs5CdPXGe28/TzPgzCqL/sRcJid9Tddu1a2bt9Sfy9iEdNEt+jb0llBqLAcjRHT3tSR/PqcT3Pf3/gk2rFge1nC0x/41OL6rHyUk4IDAAAAFQCVFfTWFTobd10lkMRBncDecpktxQAAAIBfhRw/VwYGf93JcyOre3MKhoezPS0DbH0QqmQrs2KJgD+ZvimB9qc6dBLlOoy0HjjbCIiNsonwlgJ4EWeutWbabwqr3A3MH9fDuvhTdRqkUdyQsbQZkL0iU2UZ+jKnZNgOXYTFBJECHVlaX0wgaAk9sB3li+rFY91tsYI/mpwPrwAAAIA/HHj7nZ4O8pZsnsv6EeSWyoHVw1L0AfPKOa5dQuARNKDe4Ef96n+T3mdSBcuUdzVW1+co0y98as6z1DqNAS7pr2LILDMU9dn1YIE3SLqSoxzi1VxN7XWE7wwbr+64Wr/7M8d3AGFe3pYR8zHCeOD2YBaH05CCIdf4bWKUo6NcRw== johnw@aris
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAwTFboeliU48xemZzecpkVylbQ+mCbBCf1WxwpIRVZCpv4Qqod+hzez7nJFeMfr1XVHdo2J0WyJAvbtinGxRBLa23DoyPtLppTy3YCZyiRJ8ULx6J1sBwhFwYZe4ZF2l0EBDzD4RsrQCtozQPmnv3QBHQ85zMi5PjXusLXoqmQjk= johnw@aris
''')
    os.chmod('/root/.ssh/authorized_keys', 0600)

if isfile('/etc/ssh/sshd_config'):
    if not modify('/etc/ssh/sshd_config',
                  '^#?PermitRootLogin .*', 'PermitRootLogin without-password'):
        append_file('/etc/ssh/sshd_config', 'PermitRootLogin without-password')

if sys.platform == 'sunos5':
    modify('/etc/default/login', '^CONSOLE=/dev/login', '#CONSOLE=/dev/login')
    shell('rolemod', '-K', 'type=normal', 'root')
    shell('svcadm', 'restart', 'ssh')

elif sys.platform == 'linux2':
    shell('service', 'sshd', 'restart')

# Clean and trim

if sys.platform == 'linux2':
    remove('atk',
           'authconfig',
           'bitstream-vera-fonts',
           'cairo',
           'cups-libs',
           'dhcpv6-client',
           'ecryptfs-utils',
           'fontconfig',
           'freetype',
           'gtk2',
           'hdparm',
           'hicolor-icon-theme',
           'libX11',
           'libXau',
           'libXcursor',
           'libXdmcp',
           'libXext',
           'libXfixes',
           'libXft',
           'libXi',
           'libXinerama',
           'libXrandr',
           'libXrender',
           'libhugetlbfs',
           'libjpeg',
           'libpng',
           'libtiff',
           'pango',
           'setserial',
           'trousers',
           'udftools',
           'xorg-x11-filesystem')

    if platform.architecture()[0] == '64bit':
        to_remove = []
        for package in packages:
            if not re.search('(x86_64|noarch)', package):
                to_remove.append(package)
        if len(to_remove) > 0:
            remove(*to_remove)

# Install basic tools

if not has_package('rsync'):
    install('which', 'screen', 'rsync', 'top')

# Build and install Ruby

if sys.platform == 'linux2':
    if not isfile(ruby_rpm):
        rpm = join('/usr/src/redhat/RPMS/' + arch, ruby_rpm)
        if not isfile(rpm):
            if not isdir('/usr/src/redhat/SPECS'):
                os.makedirs('/usr/src/redhat/SPECS')
            if not isdir('/usr/src/redhat/SOURCES'):
                os.makedirs('/usr/src/redhat/SOURCES')

            shutil.copy(ruby_tarball, '/usr/src/redhat/SOURCES/')

            install64('autoconf', 'automake', 'libtool', 'make',
                      'gcc', 'gcc-c++', 'glibc-devel', 'kernel-devel',
                      'rpm-build', 'rpm-devel',
                      'openssl-devel', 'readline-devel', 'zlib-devel')

            shutil.copy('ruby-enterprise.spec', '/usr/src/redhat/SPECS')
            os.chdir('/usr/src/redhat/SPECS')
            shell('rpmbuild', '-bb', '--define', 'dist .el5', 'ruby-enterprise.spec')
            os.chdir('/root')
        if isfile(rpm):
            shutil.copy(rpm, os.getcwd())
            shutil.copy(join('/usr/src/redhat/RPMS/' + arch,
                             rubygems_rpm), os.getcwd())

    if not isfile(ruby_rpm):
        raise Exception("Failed to build the Ruby RPM")

    if not has_package('ruby-enterprise'):
        shell('rpm', '-Uvh', ruby_rpm, rubygems_rpm)

# Install Puppet via Rubygems

gems = []
for line in mkreader('gem', 'list'):
    match = re.match('^(.+?) \(.+\)', line)
    if match:
        gems.append(match.group(1))

def gem_install(*pkgs):
    for pkg in pkgs:
        if pkg not in gems:
            shell('gem', 'install', '-r', pkg)

gem_install('puppet')

if server:
    modify('/etc/sysconfig/network', '^HOSTNAME=.*', 'HOSTNAME=puppet.local')

    if not has_package('mysql-server'):
        install64('mysql', 'mysql-devel', 'mysql-server')

    gem_install('rails')

    # MySQL must be installed with special parameters
    if 'mysql' not in gems:
        shell('gem', 'install', '-r', 'mysql', '--',
              '--with-mysql-config=/usr/bin/mysql_config')

### bootstrap.py ends here
