#!/usr/bin/env python

import os
import sys
import getopt
import re

def usage():
    print """Usage: check_mem [-h|--help] -w NUM -c NUM"""
    sys.exit(3)

try:
    options, args = getopt.getopt(sys.argv[1:],
        "hw:c:",
        "--help",
        )
except getopt.GetoptError:
    usage()
    sys.exit(3)

warningAmount = None
criticalAmount = None

for name, value in options:
    if name in ("-h", "--help"):
        usage()
    if name in ("-w"):
        warningAmount = int(value)
    if name in ("-c"):
        criticalAmount = int(value)

if warningAmount is None or criticalAmount is None:
    print "MEM UNKNOWN: Could not determine amounts"
    sys.exit(3)

memUsed = None
memFree = None
try:
    mem = os.popen("/usr/bin/free -m")
    for line in mem.readlines():
        match = re.match("-/\\+ buffers/cache:\\s+([0-9]+)\\s+([0-9]+)", line)
        if match:
            memUsed = int(match.group(1))
            memFree = int(match.group(2))
            break
    mem.close()
except Exception:
    print "MEM UNKNOWN: Error while getting memory counts"
    sys.exit(3)

if memUsed is None or memFree is None:
    print "MEM UNKNOWN: free had unexpected result"
    sys.exit(3)

memTotal = memUsed + memFree
freePercent = (float(memFree) * 100.0) / float(memTotal)

if freePercent < float(criticalAmount):
    exitStatus = "CRITICAL"
    exitCode = 2
    sys.exit(2)
elif freePercent < float(warningAmount):
    exitStatus = "WARNING"
    exitCode = 1
else:
    exitStatus = "OK"
    exitCode = 0

print "MEM %s: %d Mb free of %d Mb (%0.2f%%)" % \
    (exitStatus, memFree, memTotal, freePercent)
sys.exit(exitCode)
