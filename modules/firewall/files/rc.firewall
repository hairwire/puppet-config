#!/bin/bash

set -e

IPTABLES=/sbin/iptables
COMMAND=${1:-auto}

function has_files() {
    count=$(find $1 -type f -name "$2" -print | wc -l)
    return $(( count == 0 ))
}

if has_files /etc/sysconfig/networking 'public-*'; then
    for file in /etc/sysconfig/networking/public-*; do
	. $file
    done
fi
if has_files /etc/sysconfig/networking 'private-*'; then
    for file in /etc/sysconfig/networking/private-*; do
	. $file
    done
fi

if [[ $COMMAND == safety ]]; then
    while true ; do
	sleep 300
	$0 flush
    done
fi

######################################################################
#
# rc.firewall
#
#   version 1.14 (2008/08/31) by John Wiegley <admin@johnwiegley.com>
#
# This script is based on a similar firewalling script I wrote for ipfw,
# but has been changed to utilize iptables.  Also, it is customized
# solely for running on johnwiegley.com, and does not contain any
# configuration options.
#
# Revision history:
# 1.01: Added port knocking for ssh access.
# 1.02: Lock out ssh port scanners for 5 minutes.
# 1.03: Remove port scanners from lockout after 5 mins good behavior.
# 1.04: Flush the nat table as well as the filter (default) table.
# 1.05: Use hashlimit for connection rate limiting instead of recent.
# 1.06: Extended portscan lockout to an entire day.
# 1.07: Removed an excessive rule.
# 1.08: Commented out rate limiting of Apache.
# 1.09: Increased SSH availability to one day.
# 1.10: Drop ICMP redirect packets.
# 1.11: Decrease SYN flood rate limit to 60 conns per second.
# 1.12: Don't filter based on the connection source port.
# 1.13: Opened up the IMAP/S port 993.
# 1.14: Now being distributed via Puppet
#
######################################################################

$IPTABLES -F
$IPTABLES -t nat -F
$IPTABLES -X

$IPTABLES -t nat -P PREROUTING  ACCEPT
$IPTABLES -t nat -P POSTROUTING ACCEPT
$IPTABLES -t nat -P OUTPUT      ACCEPT

$IPTABLES -P INPUT   ACCEPT
$IPTABLES -P FORWARD ACCEPT
$IPTABLES -P OUTPUT  ACCEPT

if [[ $COMMAND == flush ]]; then
    exit 0
fi

######################################################################

$IPTABLES -P INPUT   DROP
$IPTABLES -P FORWARD DROP
$IPTABLES -P OUTPUT  ACCEPT

# Drop invalid packets immediately
$IPTABLES -A INPUT   -m state --state INVALID -j DROP
$IPTABLES -A FORWARD -m state --state INVALID -j DROP
$IPTABLES -A OUTPUT  -m state --state INVALID -j DROP

# Allow trusted interfaces
$IPTABLES -A INPUT   -i lo -j ACCEPT 
$IPTABLES -A FORWARD -i lo -j ACCEPT
$IPTABLES -A FORWARD -o lo -j ACCEPT

if has_files /etc/firewall.d '*.pre'; then
    for file in /etc/firewall.d/*.pre; do
	. $file
    done
fi

# Drop suspicious IP packets
#$IPTABLES -A INPUT -m ipv4options --rr   -j DROP
#$IPTABLES -A INPUT -m ipv4options --ts   -j DROP
#$IPTABLES -A INPUT -m ipv4options --lsrr -j DROP
#$IPTABLES -A INPUT -m ipv4options --ssrr -j DROP

# Drop bogus TCP packets
$IPTABLES -A INPUT -p tcp -m tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
$IPTABLES -A INPUT -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP

# Allow multicast DNS packets
$IPTABLES -A INPUT -d 224.0.0.251 -p udp -m udp --dport mdns -j ACCEPT 

# Reject packets from RFC1918 class networks (i.e., spoofed)
if [ -n "$PUBADDR" -a -n "$PUBINTF" ]; then
    #if echo $PUBADDR | grep -qv '^10\.'; then
    #	$IPTABLES -A INPUT -i $PUBINTF -s 10.0.0.0/8     -j DROP
    #fi
    if echo $PUBADDR | grep -qv '^192\.'; then
	$IPTABLES -A INPUT -i $PUBINTF -s 192.168.0.0/16 -j DROP
    fi
    if echo $PUBADDR | grep -qv '^169\.'; then
	$IPTABLES -A INPUT -i $PUBINTF -s 169.254.0.0/16 -j DROP
    fi
    #if echo $PUBADDR | grep -qv '^172\.'; then
    #	$IPTABLES -A INPUT -i $PUBINTF -s 172.16.0.0/12  -j DROP
    #fi
fi
if [ -n "$PRIVADDR" -a -n "$PRIVINTF" ]; then
    #if echo $PRIVADDR | grep -qv '^10\.'; then
    #	$IPTABLES -A INPUT -i $PRIVINTF -s 10.0.0.0/8     -j DROP
    #fi
    if echo $PRIVADDR | grep -qv '^192\.'; then
	$IPTABLES -A INPUT -i $PRIVINTF -s 192.168.0.0/16 -j DROP
    fi
    if echo $PRIVADDR | grep -qv '^169\.'; then
	$IPTABLES -A INPUT -i $PRIVINTF -s 169.254.0.0/16 -j DROP
    fi
    #if echo $PRIVADDR | grep -qv '^172\.'; then
    #	$IPTABLES -A INPUT -i $PRIVINTF -s 172.16.0.0/12  -j DROP
    #fi
fi

$IPTABLES -A INPUT -s 127.0.0.0/8      -j DROP
$IPTABLES -A INPUT -s 224.0.0.0/4      -j DROP
$IPTABLES -A INPUT -d 224.0.0.0/4      -j DROP
$IPTABLES -A INPUT -s 240.0.0.0/5      -j DROP
$IPTABLES -A INPUT -d 240.0.0.0/5      -j DROP
$IPTABLES -A INPUT -s 0.0.0.0/8        -j DROP
$IPTABLES -A INPUT -d 0.0.0.0/8        -j DROP
$IPTABLES -A INPUT -d 239.255.255.0/24 -j DROP
$IPTABLES -A INPUT -d 255.255.255.255  -j DROP

# Reject packets spoofed to appear as if from us
$IPTABLES -A INPUT -s $PUBADDR -j DROP

# Allow most ICMP packets to be received (so people can check our
# presence), but restrict the flow to avoid ping flood attacks
$IPTABLES -A INPUT -p icmp -m icmp --icmp-type address-mask-request -j DROP
$IPTABLES -A INPUT -p icmp -m icmp --icmp-type timestamp-request -j DROP
$IPTABLES -A INPUT -p icmp -m icmp --icmp-type redirect -j DROP
$IPTABLES -A INPUT -p icmp -m icmp -m limit --limit 10/second -j ACCEPT 

# Anyone in the "portscan" group is locked out for a day
$IPTABLES -A INPUT   -m recent --name portscan --rcheck --seconds 86400 -j DROP
$IPTABLES -A FORWARD -m recent --name portscan --rcheck --seconds 86400 -j DROP
$IPTABLES -A INPUT   -m recent --name portscan --remove

# Anyone trying to access us at port 139 is port scanning
#if [ -n "$PUBINTF" ]; then
#    $IPTABLES -A INPUT   -p tcp -m tcp -i $PUBINTF --dport 139 \
#	-m recent --name portscan --set -j LOG --log-level 4 --log-prefix "Portscan:"
#    $IPTABLES -A FORWARD -p tcp -m tcp -i $PUBINTF --dport 139 \
#	-m recent --name portscan --set -j LOG --log-level 4 --log-prefix "Portscan:"
#
#    $IPTABLES -A INPUT   -p tcp -m tcp -i $PUBINTF --dport 139 \
#	-m recent --name portscan --set -j DROP
#    $IPTABLES -A FORWARD -p tcp -m tcp -i $PUBINTF --dport 139 \
#	-m recent --name portscan --set -j DROP
#fi

# Delay RST packets by 0.5 seconds to avoid SMURF attacks, by given the next
# real data packet in the sequence a better chance to arrive first.
$IPTABLES -A INPUT -p tcp -m tcp --tcp-flags RST RST \
    -m limit --limit 5/second --limit-burst 5 -j ACCEPT

# If we are using IPsec, these rules allow such packets through
#$IPTABLES -A INPUT -p ah -j ACCEPT 
#$IPTABLES -A INPUT -p esp -j ACCEPT 

# Allow established and related packets
$IPTABLES -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT 

# Discard any left over fragments
$IPTABLES -A INPUT -f -j DROP

# Protect against SYN floods by rate limiting the number of new
# connections from any host to 60 per second.  This does *not* do rate
# limiting overall, because then someone could easily shut us down by
# saturating the limit.
#$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp --syn \
#    -m recent --name synflood --update --seconds 1 --hitcount 60 -j DROP

# Reply to unknown "NEW" SYN/ACK packets with a RESET, so we can't be
# used as a middle-man for Sequence Number Prediction based spoof
# attacks.
$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp \
    --tcp-flags SYN,ACK SYN,ACK -j REJECT --reject-with tcp-reset

# Log and drop NEW packets which don't have the SYN bit set
#$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp ! --syn \
#    -j LOG --log-level 4 --log-prefix "New !SYN:"
$IPTABLES -A INPUT -m state --state NEW -p tcp -m tcp ! --syn -j DROP

# If any packets reach this point that have the ACK bit sent (but not
# SYN), respond with a TCP reset
$IPTABLES -A INPUT -p tcp -m tcp --tcp-flags ACK ACK \
    -j REJECT --reject-with tcp-reset

if has_files /etc/firewall.d '*.ipt'; then
    for file in /etc/firewall.d/*.ipt; do
	. $file
    done
fi

# Reject all others by letting them know that such communication with the host
# is forbidden
$IPTABLES -A INPUT -j REJECT --reject-with icmp-admin-prohibited 

if [[ $COMMAND != auto ]]; then
    echo If you can exit me now, things are OK...
    sleep 120

    exec $0 flush
else
    service iptables save
fi
